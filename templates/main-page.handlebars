<div id="wrapper">

  <nav>
    <h1>Learn.<span class="title-contrast">Ember</span>.js</h1>
  </nav>

  <article>
  
   <h1>Welcome!</h1>
  
   <p class="prototype-notice">This is an early prototype containing just the
   first page of a planned interactive tutorial on <a
   href="http://emberjs.com/">Ember.js</a>, a JavaScript framework for building
   ambitious web applications. For more details about the ongoing development
   of this tutorial, see <a
   href="http://blog.concord.org/building-learn-ember-js-part-1-i-say-app-you-say-document">
   this blog post</a>. It does not work in Internet Explorer (at least versions 
   8 and below).</p>
  
   <p>In this tutorial you'll explore the basics of building a web application
  using Ember's declarative bindings and MVC-friendly features.</p>

    <p>You'll learn how to define your UI's appearance using client-side HTML
    templates; how to define model, view, and controller objects using
    Ember's prototype-friendly class system; and how to use property
    accessors and declarative bindings to keep everything neatly
    synchronized.</p>
    
    <h2>Using bindings and view templates</h2>
    
    <p>In the upper right pane is the Javascript code of a complete, if
    simple, Ember application that describes the name of a person. In the
    lower right pane is HTML describing how to display the data.</p>
    
    <p>Click {{#view Learn.RunButton class="inline-button run-button"}}Run
    &rarr;{{/view}} to see what this code does.</p>
    
    {{view Learn.OutputView class="output-view" classBinding="isHidden"}}
    
    <p>As you can see, it just lists the first and last names as "TODO". Let's
    fix that.</p>
  
    <p>The key is that the markup in the lower right isn't just HTML; it's a
    <a href="http://www.handlebarsjs.com/">Handlebars template</a> which
    yields the actual HTML to be rendered. <strong>Go ahead and modify the
    template</strong>, adding Handlebars expressions to display the parts of
    the name:</p>
    
    <pre>&lt;p&gt;First name: &#123;&#123;Names.firstName&#125;&#125;&lt;/p&gt;
&lt;p&gt;Last name: &#123;&#123;Names.lastName&#125;&#125;&lt;/p&gt;</pre>
    
    <p>The <code>&#123;&#123;</code> and <code>&#125;&#125;</code>
    &ldquo;mustaches&rdquo; begin and end Handlebars expressions, which will
    be replaced by whatever value the <em>property paths</em>
    <code>Names.firstName</code> and <code>Names.lastName</code> evaluate to.
    </p>
    
    <p>Now let's see what happens: {{#view Learn.RunButton
    class="inline-button run-button"}}Run &rarr;{{/view}}.<p>

    {{view Learn.OutputView class="output-view" classBinding="isHidden"}}
    
    <p>By the way, if at any point, you find that you've been following the
    instructions but can't get the code to work as described, click the
    &ldquo;Help Me Out &rarr;&rdquo; button, and your code will be replaced
    with a working copy.</p>  
    
    <p>Finally, note that the &ldquo;Run &rarr;&rdquo; button is only needed
    here so that we can re-evaluate your code after you change it! As you'll
    soon see, Handlebars and Ember work together so that the template's
    output &mdash; your UI &mdash; automatically updates when data changes in
    your application.</p>

  </article>

  <div id="code-editors">

    <div id="code-editors-wrapper">
      {{#view Learn.JsEditorView id="js-editor-view" class="editor-view"}}
        <h1>Javascript</h1>
        <div class="ace-editor"></div>
      {{/view}}

      {{#view Learn.TemplateEditorView id="template-editor-view" class="editor-view"}}
        <h1>Handlebars HTML</h1>
        <div class="ace-editor"></div>
      {{/view}}
    </div>

  </div>

</div>